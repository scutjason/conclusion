本算法来自word2vec c源码，算法实现非常巧妙值得学习！

首先搞清楚啥是哈夫曼树

哈夫曼树的学术定义为，带权路径长度最短的二叉树，即节点具有两个属性：
  1、权值，可以看作节点表达出的数值大小，或者变换的表示为概率大小
  2、路径，可以看作由根节点到达当前节点的分支数，左分支和右分支具有不同意义
  
带权路径长度即为权值与路径乘积的累加，所以哈夫曼树首先是一棵二叉树，其次通过调整二叉树节点位置，使得带权路径长度最小。
也就是最优二叉树。

构建过程：
  1、当节点序列中的根节点数量多于一个时，从当前节点序列中选择两个权值最小的根节点，分别作为左右子节点，创建新的根节点
  2、从序列中删除上一步选择的两个根节点，将新创建的根节点加入序列
  3、重复执行以上两步，最终节点序列中剩余的一个节点即为最终的根节点。
  
以节点：[1,2,3,7]，为例，创建过程如下：
  初始状态：四个节点，按照权值由小到大排列，分布用a,b,c,d表示
  a b c d
  1 2 3 7
  第一步：选择两个权值最小的根节点，即a,b两节点，构建新根节点，规定左子节点权值不大于右子节点权值
      3
   1a   2b  3c  7d
  
  第二步：按照规则，继续选择两个权值最小的根节点，构建新根节点
      6
    3   3c  7d
  1a  2b  
  
  最后：
        13
      6    7d
    3   3c
  1a  2b
  
  以上图为例，左分支看作0，右分支看作1，则a,b,c,d对应的编码为：
  a:000   b:001   c:01   d:1



有了前菜之后，接下来是主菜，google大神写的哈夫曼编码 CreateBinaryTree()
  
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <pthread.h>

#define MAX_CODE_LENGTH 40

long long vocab_size = 100; //词表大小
struct vocab_word {
    long long cn;  // 词频
    int *point;  // 哈夫曼树中从根节点到该词的路径，存放路径上每个非叶结点的索引
    char *word, *code, codelen;  // 分别是词的字面，霍夫曼编码，编码长度
};
struct vocab_word *vocab; // 词表

void CreateBinaryTree() {
    long long a, b, i, min1i, min2i, pos1, pos2, point[MAX_CODE_LENGTH];
    char code[MAX_CODE_LENGTH];
    long long *count = (long long *)calloc(vocab_size * 2 + 1, sizeof(long long));    // 记录词频
    long long *binary = (long long *)calloc(vocab_size * 2 + 1, sizeof(long long));     // 记录010101编码，初始化为0
    long long *parent_node = (long long *)calloc(vocab_size * 2 + 1, sizeof(long long));
    for (a = 0; a < vocab_size; a++) count[a] = vocab[a].cn;
    for (a = vocab_size; a < vocab_size * 2; a++) count[a] = 1e15;        // 后面为 10的15次方 这个是个比较值
    pos1 = vocab_size - 1;
    pos2 = vocab_size;
    // Following algorithm constructs the Huffman tree by adding one node at a time
    // 只需要循环vocab_size - 1就能将树建好
    for (a = 0; a < vocab_size - 1; a++) {
        // First, find two smallest nodes 'min1, min2' 找出目前权值最小的两个点，
        /**
            连续比较两次的意义就在于，挑选出最小的两个数，
            因为已经排好序了，所以挑选出来的数必然是最小的
            当然这个最小数可能是之前两个最小数的和。也就是新生成的父节点
            pos2表示新生成的父节点，这个也是非叶子节点。
            pos1表示叶子节点
        **/
        if (pos1 >= 0) {
            // 左边没有遍历完
            // 谁小谁移动
            if (count[pos1] < count[pos2]) {
                min1i = pos1;
                pos1--;
            } else {
                // 如果叶子节点的父节点都搞完了，那就遍历父节点
                min1i = pos2;
                pos2++;
            }
        } else {
            min1i = pos2;
            pos2++;
        }
        if (pos1 >= 0) {
            if (count[pos1] < count[pos2]) {
                min2i = pos1;
                pos1--;
            } else {
                min2i = pos2;
                pos2++;
            }
        } else {
            min2i = pos2;
            pos2++;
        }
        count[vocab_size + a] = count[min1i] + count[min2i];
        // 记录每个节点的父节点位置
        // 这里父节点的位置很巧妙，每一次计算都直接往后移动父节点，
        // 并且这个父节点也是排好序的，不过是升序排列，父节点的权值肯定越来越大嘛
        
        parent_node[min1i] = vocab_size + a; 
        parent_node[min2i] = vocab_size + a;
        // [0 - pos1], [pos2 -  vocab_size + a]上的节点都是剩下的点，需要继续建立树。
        
        
        // 记录每个节点对应的权值。权值较大的为1，权值较小的为0
        // binary已经全部初始化为0了，所以只要标记权值较大的值为1就行
        binary[min2i] = 1; 
    }
    
    // Now assign binary code to each vocabulary word
    // 树建好之后，就是给每个叶子节点分配路径
    // 先从词频最大的节点开始
    for (a = 0; a < vocab_size; a++) {
        b = a;
        i = 0;
        while (1) {
            code[i] = binary[b];
            point[i] = b; 
            // printf("%d, %lld\n", vocab[a].cn, b);
            i++;
            b = parent_node[b];
            if (b == vocab_size * 2 - 2) break;  // 如果到达根节点就退出
        }
        vocab[a].codelen = i;
        // 假设用vocab_size存储所有非叶子节点
        // 那么根节点在导数第二个位置，
        // 因为整个非叶子节点都只有vocab_size-1个，也及vocab_size - 2处
        // 这里沿着根节点一直走下来到叶子节点时，也是逆序的。从右往左走
        vocab[a].point[0] = vocab_size - 2; // 根节点位置
        for (b = 0; b < i; b++) {
            vocab[a].code[i - b - 1] = code[b]; // 从根节点一直到叶子结点的编码，包含根节点
            // 从跟节点一直到叶子节点的路径，最后一个节点b = 0，point[i]是自己，所以point是负值，反正没有意义
            vocab[a].point[i - b] = point[b] - vocab_size;  
            // printf("%d, %d\n", vocab[a].cn, vocab[a].point[i - b]);
        }
    }
    free(count);
    free(binary);
    free(parent_node);
}

int VocabCompare(const void *a, const void *b) {
    return ((struct vocab_word *)b)->cn - ((struct vocab_word *)a)->cn; // 降序排列
}

void genVocab(int len, int num){
    vocab_size = len;
    vocab = (struct vocab_word *)calloc(len, sizeof(struct vocab_word));
    int a = 0;
    // Allocate memory for the binary tree construction
    for (a = 0; a < vocab_size; a++) {

        unsigned long long next_random = a;
        next_random = next_random * (unsigned long long)25214903917 + 11;
        vocab[a].cn = next_random % num;
        vocab[a].code = (char *)calloc(MAX_CODE_LENGTH, sizeof(char));
        vocab[a].point = (int *)calloc(MAX_CODE_LENGTH, sizeof(int));
    }
    
    qsort(&vocab[0], vocab_size, sizeof(struct vocab_word), VocabCompare);
}

void print_vocab(){
    int a = 0;
    for (a = 0; a < vocab_size-1; a++) {
        printf("%lld - ",vocab[a].cn);
    }
    printf("%lld\n",vocab[a].cn);
}

void print_tree(){
    int a,b = 0;
    for (a = 0; a < vocab_size-1; a++) {
        printf("%lld(",vocab[a].cn);
        for (b = 0; b < vocab[a].codelen; b++)
            printf("%d",vocab[a].code[b]);
        printf(") - ");
        
    }
    printf("%lld(",vocab[a].cn);
    for (b = 0; b < vocab[a].codelen; b++)
        printf("%d",vocab[a].code[b]);
    printf(")\n");
}

void main(){
    genVocab(8, 200);
    // print_vocab();
    CreateBinaryTree();
    print_tree();
}

